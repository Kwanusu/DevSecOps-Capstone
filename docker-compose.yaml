version: "3.9"

volumes:
  loki-data:
  grafana-data:

networks:
  monitoring:
    driver: bridge
  app-network:
    driver: bridge

services:
  # ----------------------------
  # Monitoring stack
  # ----------------------------
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - '9090:9090'
    networks:
      - monitoring
      - app-network   # connect to app network to scrape backend
    restart: unless-stopped

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
    ports:
      - '9100:9100'
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - '8080:8080'
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  loki:
    image: grafana/loki
    container_name: loki
    volumes:
      - ./config/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki-data:/loki
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - monitoring
    restart: unless-stopped

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /tmp/positions.yaml:/tmp/positions.yaml
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3000:3000'
    networks:
      - monitoring
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana

  # ----------------------------
  # Application stack
  # ----------------------------
  backend:
    build: ./backend
    container_name: flask-backend
    expose:
      - "8000"
    networks:
      - app-network
      - monitoring   # connect to monitoring network
    environment:
      - FLASK_ENV=development

  frontend-build:
    build:
      context: ./frontend/event-manager
      dockerfile: Dockerfile
    container_name: react-builder
    networks:
      - app-network
    # No ports exposed, just builds

  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: nginx-proxy
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - backend
      - frontend-build
    networks:
      - app-network
      - monitoring   # allow Promtail/Loki to scrape logs

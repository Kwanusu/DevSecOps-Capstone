name: CI/CD with ArgoCD and RBAC

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/myapp:${{ github.sha }} .

      - name: Azure Container Registry Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/myapp:${{ github.sha }}

      - name: Update Kubernetes manifests
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|${{ secrets.ACR_LOGIN_SERVER }}/myapp:${{ github.sha }}|g" k8s/deployment.yaml

      - name: Set up AKS credentials
        uses: azure/aks-set-context@v3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: devsecops-rg
          cluster-name: devsecops-aks

      - name: Commit updated manifests
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add k8s/deployment.yaml
          git commit -m "Update image to ${{ github.sha }}" || echo "No changes"
          git push

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Enable ArgoCD user accounts (dev-user & ops-user)
      - name: Apply ArgoCD Accounts Config
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cm
            namespace: argocd
          data:
            accounts.dev-user: login
            accounts.ops-user: login
          EOF

      # Step 2: Apply ArgoCD RBAC rules
      - name: Apply ArgoCD RBAC rules
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-rbac-cm
            namespace: argocd
          data:
            policy.default: role:readonly
            policy.csv: |
              p, role:dev, applications, get, default/*, allow
              p, role:dev, applications, sync, default/*, allow
              p, role:ops, applications, get, *, allow
              p, role:ops, applications, sync, *, allow
              g, dev-user, role:dev
              g, ops-user, role:ops
          EOF

      # Step 3: Port-forward ArgoCD service
      - name: Port-forward ArgoCD
        run: |
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          sleep 5

      # Step 4: Login to ArgoCD
      - name: ArgoCD Login
        run: |
          argocd login localhost:8080 \
            --username admin \
            --password ${{ secrets.ARGOCD_ADMIN_PASSWORD }} \
            --insecure

      # Step 5: Set passwords for new users
      - name: Set ArgoCD User Passwords
        run: |
          argocd account update-password --account dev-user --current-password "" --new-password ${{ secrets.ARGOCD_DEV_PASSWORD }}
          argocd account update-password --account ops-user --current-password "" --new-password ${{ secrets.ARGOCD_OPS_PASSWORD }}

      # Step 6: Sync application
      - name: ArgoCD Sync App
        run: |
          argocd app sync myapp

      # Step 7: Verify application health
      - name: Verify App Health
        run: |
          argocd app wait myapp --health --timeout 180

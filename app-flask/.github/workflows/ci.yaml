name: CI/CD with ArgoCD, RBAC, Scanning, Linting & Monitoring

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write   # needed for CodeQL

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # ---------------------------
      # Python linting & testing (Flask app)
      # ---------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run flake8 linting
        run: |
          flake8 app/ \
            --count --max-complexity=10 --max-line-length=120 --statistics

      - name: Run pytest
        run: pytest -q --disable-warnings --maxfail=1

      # ---------------------------
      # Node.js steps (frontend, if any)
      # ---------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Node.js deps
        run: npm install

      - name: Run frontend tests
        run: npm test

      # ---------------------------
      # Security Scans (NEW)
      # ---------------------------

      # Static code analysis (SAST) with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Python dependency scanning
      - name: Python Dependency Scan
        uses: pyupio/safety-action@v1
        with:
          args: check --full-report

      # Node.js dependency scanning
      - name: Node.js Audit
        run: npm audit --audit-level=high || true

      # IaC scanning for Kubernetes/Terraform/Helm
      - name: IaC Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./k8s

      # Secret scanning
      - name: Secret Scan with Gitleaks
        uses: gitleaks/gitleaks-action@v2

      # ---------------------------
      # SonarQube Scan
      # ---------------------------
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # ---------------------------
      # Docker build & scan
      # ---------------------------
      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.CONTAINER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
          docker build -t "$IMAGE" .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Login to registry
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.CONTAINER_REGISTRY }} -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      - name: Push image
        run: docker push "${{ env.IMAGE }}"

      # ---------------------------
      # Update manifests repo (GitOps style)
      # ---------------------------
      - name: Bump image tag in manifests repo (kustomization images)
        env:
          MANIFESTS_REPO: ${{ secrets.MANIFESTS_REPO }}
          TOKEN: ${{ secrets.MANIFESTS_REPO_PAT }}
          KUSTOMIZE_PATH: ${{ secrets.KUSTOMIZE_PATH }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git clone https://x-access-token:${TOKEN}@github.com/${MANIFESTS_REPO}.git manifests-tmp
          cd manifests-tmp
          # Install yq
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 && sudo chmod +x /usr/local/bin/yq
          IMG="${{ env.IMAGE }}"
          yq -i '.images[0].newName = strenv(IMG) | .images[0].name = "app-image" | .images[0].newTag = ""' ${KUSTOMIZE_PATH}/kustomization.yaml
          git add ${KUSTOMIZE_PATH}/kustomization.yaml
          git commit -m "chore: bump image to ${IMG}" || echo "No changes"
          git push origin HEAD:main

  deploy:
    needs: build-test-scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Enable ArgoCD user accounts
      - name: Apply ArgoCD Accounts Config
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cm
            namespace: argocd
          data:
            accounts.dev-user: login
            accounts.ops-user: login
          EOF

      # Step 2: Apply ArgoCD RBAC rules
      - name: Apply ArgoCD RBAC rules
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-rbac-cm
            namespace: argocd
          data:
            policy.default: role:readonly
            policy.csv: |
              p, role:dev, applications, get, default/*, allow
              p, role:dev, applications, sync, default/*, allow
              p, role:ops, applications, get, *, allow
              p, role:ops, applications, sync, *, allow
              g, dev-user, role:dev
              g, ops-user, role:ops
          EOF

      # Step 3: Port-forward ArgoCD service
      - name: Port-forward ArgoCD
        run: |
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          sleep 5

      # Step 4: Login to ArgoCD
      - name: ArgoCD Login
        run: |
          argocd login localhost:8080 \
            --username admin \
            --password ${{ secrets.ARGOCD_ADMIN_PASSWORD }} \
            --insecure

      # Step 5: Set passwords for new users
      - name: Set ArgoCD User Passwords
        run: |
          argocd account update-password --account dev-user --current-password "" --new-password ${{ secrets.ARGOCD_DEV_PASSWORD }}
          argocd account update-password --account ops-user --current-password "" --new-password ${{ secrets.ARGOCD_OPS_PASSWORD }}

      # Step 6: Sync application
      - name: ArgoCD Sync App
        run: argocd app sync myapp

      # Step 7: Verify application health
      - name: Verify App Health
        run: argocd app wait myapp --health --timeout 180

      # Step 8: Deploy Monitoring Stack (Prometheus, Grafana, Loki)
      - name: Deploy Monitoring Stack
        run: |
          kubectl apply -f k8s/monitoring/prometheus.yaml
          kubectl apply -f k8s/monitoring/grafana.yaml
          kubectl apply -f k8s/monitoring/loki.yaml

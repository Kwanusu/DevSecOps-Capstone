name: CI/CD with ArgoCD, RBAC, Scanning & Monitoring

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ARGOCD_ADMIN_PASSWORD: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
  ARGOCD_DEV_PASSWORD: ${{ secrets.ARGOCD_DEV_PASSWORD }}
  ARGOCD_OPS_PASSWORD: ${{ secrets.ARGOCD_OPS_PASSWORD }}
  MANIFESTS_REPO: ${{ secrets.MANIFESTS_REPO }}
  MANIFESTS_REPO_PAT: ${{ secrets.MANIFEST_REPO_PAT }}
  KUSTOMIZE_PATH: ${{ secrets.KUSTOMIZE_PATH }}

jobs:
  devsecops-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Python Lint & Test ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Python deps
        run: |
          pip install flake8 pytest safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run flake8
        run: flake8 app/ --count --max-complexity=10 --max-line-length=120 --statistics
      - name: Run pytest
        run: pytest -q --disable-warnings --maxfail=1
      - name: Python dependency scan
        uses: pyupio/safety-action@v1
        with:
          args: check --full-report

      # --- Node.js Frontend ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install frontend deps
        run: npm install
      - name: Run frontend tests
        run: npm test
      - name: Node.js Audit
        run: npm audit --audit-level=high || true

      # --- Security Scans ---
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      - name: IaC Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./k8s
      - name: Secret Scan with Gitleaks
        uses: gitleaks/gitleaks-action@v2

  build-push-images:
    needs: devsecops-scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    outputs:
      backend-image: ${{ steps.set-output-image.outputs.backend_image }}
      frontend-image: ${{ steps.set-output-image.outputs.frontend_image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine if service changed
        id: changes
        run: |
          if [ "${{ matrix.service }}" == "backend" ]; then
            git diff --name-only HEAD~1 HEAD | grep -q '^backend/' && echo "CHANGED=true" || echo "CHANGED=false"
          else
            git diff --name-only HEAD~1 HEAD | grep -q '^frontend/' && echo "CHANGED=true" || echo "CHANGED=false"
          fi
          echo "CHANGED=$CHANGED" >> $GITHUB_ENV

      - name: Skip if no changes
        if: env.CHANGED == 'false'
        run: |
          echo "No changes in ${{ matrix.service }}, skipping build."
          exit 0

      - name: Set service variables
        run: |
          if [ "${{ matrix.service }}" == "backend" ]; then
            SERVICE_PATH="backend/app-flask"
            IMAGE="${ECR_REGISTRY}/backend:${GITHUB_SHA}"
          else
            SERVICE_PATH="frontend"
            IMAGE="${ECR_REGISTRY}/frontend:${GITHUB_SHA}"
          fi
          echo "SERVICE_PATH=$SERVICE_PATH" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t "$IMAGE" "$SERVICE_PATH"

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE }}
          severity: HIGH,CRITICAL
          exit-code: 1

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Push image to ECR
        run: docker push $IMAGE

      - name: Set output image
        id: set-output-image
        run: |
          if [ "${{ matrix.service }}" == "backend" ]; then
            echo "backend_image=$IMAGE" >> $GITHUB_OUTPUT
          else
            echo "frontend_image=$IMAGE" >> $GITHUB_OUTPUT


  deploy:
    needs: build-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFESTS_REPO }}
          token: ${{ env.MANIFEST_REPO_PAT }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update Kustomize images
        run: |
          yq -i ".images[0].newName = \"${{ needs.build-push-images.outputs.backend-image }}\"" $KUSTOMIZE_PATH/kustomization.yaml
          yq -i ".images[1].newName = \"${{ needs.build-push-images.outputs.frontend-image }}\"" $KUSTOMIZE_PATH/kustomization.yaml
          git config user.email "github-actions@github.com"
          git config user.name "github-actions"
          git commit -am "Update images" || echo "No changes"
          git push origin HEAD:main

      - name: ArgoCD Login
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username admin \
            --password ${{ secrets.ARGOCD_ADMIN_PASSWORD }} \
            --insecure

      - name: Configure ArgoCD users
        run: |
          argocd account update-password --account dev-user --current-password "" --new-password ${{ secrets.ARGOCD_DEV_PASSWORD }}
          argocd account update-password --account ops-user --current-password "" --new-password ${{ secrets.ARGOCD_OPS_PASSWORD }}

      - name: Sync Applications
        run: |
          for app in backend-app frontend-app; do
            argocd app sync $app
            argocd app wait $app --health --timeout 300
          done

      - name: Deploy monitoring stack
        run: |
          kubectl apply -f k8s/monitoring/
          kubectl rollout status deployment/prometheus-deployment -n monitoring --timeout=120s || true
          kubectl rollout status deployment/grafana-deployment -n monitoring --timeout=120s || true
          kubectl rollout status statefulset/loki -n monitoring --timeout=120s || true
